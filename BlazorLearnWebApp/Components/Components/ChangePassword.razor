@using BlazorLearnWebApp.Vo
@using BlazorLearnWebApp.Entity
@using System.Diagnostics.CodeAnalysis

<ValidateForm @ref="_validateForm" Model="_changePasswordVo" OnValidSubmit="OnValidSubmit">
    <div class="row">
        <div class="col-12">
            <BootstrapPassword @bind-Value="_changePasswordVo.OldPassword" DisplayText="原密码"></BootstrapPassword>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <BootstrapPassword @bind-Value="_changePasswordVo.NewPassword" DisplayText="新密码" ValidateRules="_validators"></BootstrapPassword>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <BootstrapPassword @bind-Value="_changePasswordVo.RePassword" DisplayText="确认新密码" ValidateRules="_validators"></BootstrapPassword>
        </div>
    </div>
    
    <div class="modal-footer">
        <DialogCloseButton></DialogCloseButton>
        <Button Text="确认" Icon="fa-solid fa-floppy-disk" ButtonType="ButtonType.Submit"></Button>
    </div>
</ValidateForm>

@code {
    private ValidateForm? _validateForm;
    
    private ChangePasswordVo _changePasswordVo = new ChangePasswordVo();

    private List<IValidator> _validators = new List<IValidator>()
    {
        new RePasswordValidator()
    };

    [Parameter]
    [NotNull]
    public UserEntity? UserEntity { get; set; }
    
    [CascadingParameter]
    private Func<Task>? OnCloseAsync { get; set; }

    private async Task OnValidSubmit(EditContext arg)
    {
        if (UserEntity.Password != _changePasswordVo.OldPassword)
        {
            _validateForm.SetError(nameof(ChangePasswordVo.OldPassword), "原密码不正确");
            return;
        }

        UserEntity.Password = _changePasswordVo.NewPassword;
        await UserEntity.SaveAsync();

        if (OnCloseAsync != null)
        {
            await OnCloseAsync();
        }
    }

}